beer_ts
data("USgas_ts")
View(USgas_ts)
USgas_ts
?USgas_ts
library(readr)
SCHD_Fund_Distributions <- read_csv("Downloads/SCHD_Fund_Distributions.csv")
View(SCHD_Fund_Distributions)
library(fpp)
library(fpp2)
Acf(SCHD_Fund_Distributions)
Acf(SCHD_Fund_Distributions$Income)
Acf(SCHD_Fund_Distributions$Income, lag.max = 9)
Acf(SCHD_Fund_Distributions$Income, lag.max = 8)
SCHD_Fund_Distributions[order(SCHD_Fund_Distributions$Income, decreasing = TRUE),]
SCHD_Fund_Distributions
SCHD_Fund_Distributions
View(SCHD_Fund_Distributions)
View(SCHD_Fund_Distributions)
library(readr)
SCHD_Div <- read_csv("Downloads/SCHD_Fund_Distributions_Sorted.csv")
View(SCHD_Div)
library(timeSeriesDataSets)
library(fpp)
library(fpp2)
Acf(SCHD_Div$Income)
Acf(SCHD_Div$Income, lag.max = 8)
plot(SCHD_Div$Income)
Acf(SCHD_Fund_Distributions$Income)
Acf(SCHD_Fund_Distributions$Income)
Acf(SCHD_Fund_Distributions$Income, lag.max = 8)
View(SCHD_Div)
View(SCHD_Div)
plot(SCHD_Fund_Distributions$Income)
forecast(SCHD_Fund_Distributions$Income)
view(SCHD_Fund_Distributions)
View(SCHD_Fund_Distributions)
library(readr)
CPI_IT <- read_csv("Downloads/CUSR0000SEEE.csv")
View(CPI_IT)
?CPI_IT
Typical_Employee_Survey_Data <- read.csv("/Users/mattcolao/Downloads/CUSR0000SEEE.csv",header = FALSE)
library(readr)
CUSR0000SEEE <- read_csv("Downloads/CUSR0000SEEE.csv")
View(CUSR0000SEEE)
cpi <- read.csv("/Users/mattcolao/Downloads/CUSR0000SEEE.csv")
head(cpi)
tail(cpi)
cpi.ts<-ts(cpi[,2], start=c(2006,1), end=c(2025,1), frequency=12)
cpi.ts
library(fpp2)
install.packages("gridExtra")
library(gridExtra)
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
autoplot(cpit.ts)+ylab("CPI for IT (Seasonally Adjusted)")+xlab("Month, Year")+ptheme+ggtitle("CPI for IT(Seasonally Adjusted)")
autoplot(cpi.ts)+ylab("CPI for IT (Seasonally Adjusted)")+xlab("Month, Year")+ptheme+ggtitle("CPI for IT(Seasonally Adjusted)")
autoplot(cpi.ts)+ylab("CPI for IT (Seasonally Adjusted)")+xlab("Month and Year")+ptheme+ggtitle("CPI for IT(Seasonally Adjusted)")
window(cpi.ts, start=c(2020,1))
cpi2020 <- window(cpi.ts, start=c(2020,1))
autoplot(cpi2020)
autoplot(cpi2020) +
labs(x = 'Year And Month', y = 'CPI for IT(Seasonally Adjusted)')
autoplot(cpi2020) +
labs(x = 'Year And Month', y = 'CPI for IT(Seasonally Adjusted)') +
ptheme
autoplot(cpi2020) +
labs(x = 'Year And Month', y = 'CPI for IT(Seasonally Adjusted)') +
ptheme +
ggtitle('CPI for IT Since 2020(Seasonally Adjusted)')
autoplot(cpi.ts)+ylab("CPI for IT (Seasonally Adjusted)")+xlab("Month and Year")+ptheme+ggtitle("CPI for IT(Seasonally Adjusted)")
autoplot(cpi2020) +
labs(x = 'Year And Month', y = 'CPI for IT(Seasonally Adjusted)') +
ptheme +
ggtitle('CPI for IT Since 2020(Seasonally Adjusted)')
library(fpp)
library(fpp2)
library(fpp)
library(fpp2)
library(TTR)
cpi <- read.csv("/Users/mattcolao/Downloads/CUSR0000SEEE.csv")
cpi.ts<-ts(cpi[,2], start=c(2006,1), end=c(2025,1), frequency=12)
library(gridExtra)
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
library(fpp2)
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
library(fpp)
library(fpp2)
library(TTR)
attributes(elecequip)
plot(elecequip)
Acf(elecequip)
Acf(elecequip)
attributes(elecequip)
elecequip
Acf(elecequip)
Acf(elecequip)
plot(elecequip)
plot(elecequip, start=c(2009, 1))
autoplot(elecequip, start=c(2010,1))
Acf(elecequip)
Acf(elecequip, lag.max = 13)
mean_forecast <- meanf(elecequip,5)
plot(mean_forecast)
Acf(elecequip)
?elecequip
autoplot(elecequip)
# Naive
naive_forecast <- naive(elecequip,5)
plot(naive_forecast)
plot(mean_forecast)
plot(mean_forecast)
autoplot(cpi2020) +
labs(x = 'Year And Month', y = 'CPI for IT(Seasonally Adjusted)') +
ptheme +
ggtitle('CPI for IT Since 2020(Seasonally Adjusted)')
cpi <- read.csv("/Users/mattcolao/Downloads/CUSR0000SEEE.csv")
cpi.ts<-ts(cpi[,2], start=c(2006,1), end=c(2025,1), frequency=12)
library(gridExtra)
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
# Plot since 2020
cpi2020 <- window(cpi.ts, start=c(2020,1))
autoplot(cpi2020) +
labs(x = 'Year And Month', y = 'CPI for IT(Seasonally Adjusted)') +
ptheme +
ggtitle('CPI for IT Since 2020(Seasonally Adjusted)')
mean_forecast <- meanf(cpi2020, 12)
mean_forecast
plot(mean_forecast)
plot(meanf(cpi2020, 2))
# Naive
naive_forecast <- naive(elecequip,5)
plot(naive_forecast)
rwf_forecast <- rwf(elecequip,5)
plot(rwf_forecast)
rwf_forecast <- rwf(elecequip,5, drift = TRUE)
plot(rwf_forecast)
# Seasonal Naive
snaive_forecast <- snaive(elecequip,5)
plot(snaive_forecast)
MA5_forecast <- ma(elecequip,order=5)
MA9_forecast <- ma(elecequip,order=9)
# plot all in a single chart
plot(mean_forecast)
lines(naive_forecast$mean,col="red")
# Naive
naive_forecast <- naive(elecequip,5)
plot(naive_forecast)
# plot all in a single chart
plot(mean_forecast)
lines(naive_forecast$mean,col="red")
#take Mean of all available history
mean_forecast <- meanf(elecequip,5)
plot(mean_forecast)
# Naive
naive_forecast <- naive(elecequip,5)
plot(naive_forecast)
# Random Walk
rwf_forecast <- rwf(elecequip,5)
rwf_forecast <- rwf(elecequip,5, drift=TRUE)
# Seasonal Naive
snaive_forecast <- snaive(elecequip,5)
MA5_forecast <- ma(elecequip,order=5)
MA9_forecast <- ma(elecequip,order=9)
# plot all in a single chart
plot(mean_forecast)
lines(naive_forecast$mean,col="red")
plot(mean_forecast)
lines(naive_forecast$mean,col="red")
lines(rwf_forecast$mean,col="green")
lines(snaive_forecast$mean,col="black")
lines(MA5_forecast,col="Pink")
lines(MA9_forecast,col="Blue")
ma50 <- ma(elecequip, order=50)
plot(ma50)
$names
plot(elecequip)
lines(naive_forecast$fitted,col = 'red')
# Decomposition
ets_forecast <- ets(elecequip)
plot(ets_forecast)
attributes(ets_forecast)
ets_forecast$mse
HW_forecast <- HoltWinters(elecequip)
plot(HW_forecast)
SSE_Simple <- HoltWinters(elecequip,beta=FALSE,gamma=FALSE)
plot(SSE_Simple)
SSE_Simple$SSE
forecast_ets_1 <- forecast.ets(ets_forecast,h=5)
plot(forecast_ets_1)
foreast_ets_2 <- forecast(ets_forecast,h=5)
plot(foreast_ets_2)
attributes(ets_forecast)
HW_forecast
plot(HW_forecast)
plot(SSE_Simple)
plot(HoltWinters(elecequip, alpha = FALSE))
forecast_hw <- forecast(HW_forecast,h=5)
plot(forecast_hw)
forecast_hw <- forecast(HW_forecast,h=40)
plot(forecast_hw)
forecast_hw <- forecast(HW_forecast,h=10)
plot(forecast_hw)
forecast_hw <- forecast(HW_forecast,h=5)
plot(forecast_hw)
accuracy(forecast_hw)
plot(elecequip)
?window
window(elecequip,start = c(2010,1))
partial <- window(elecequip,start = c(2010,1))
plot(partial)
Acf(partial)
new_forecast <- HoltWinters(partial)
new_forecast <- HoltWinters(partial, gamma = FALSE)
plot(new_forecast)
yes <- forecast(new_forecast, h = 5)
plot(yes)
accuracy(yes)
library(gridExtra)
cpi <- read.csv("/Users/mattcolao/Downloads/CUSR0000SEEE.csv")
head(cpi)
tail(cpi)
cpi.ts<-ts(cpi[,2], start=c(2006,1), end=c(2025,1), frequency=12)
cpi.ts
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
# Plot since 2006
autoplot(cpi.ts) +
ylab("CPI for IT (Seasonally Adjusted)") +
xlab("Month and Year") +
ptheme +
ggtitle("CPI for IT(Seasonally Adjusted)")
# Plot since 2020
cpi2020 <- window(cpi.ts, start=c(2020,1))
autoplot(cpi2020) +
labs(x = 'Year And Month', y = 'CPI for IT(Seasonally Adjusted)') +
ptheme +
ggtitle('CPI for IT Since 2020(Seasonally Adjusted)')
#ACF
Acf(cpi.ts)
#ACF
Acf(cpi.ts)
#ACF
Acf(cpi.ts)
cpi.ts<-ts(cpi[,2], start=c(2006,1), end=c(2025,1), frequency=12)
cpi.ts
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
# Our packages
library(fpp)
library(TTR)
library(gridExtra)
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
cpi <- read.csv("/Users/mattcolao/Downloads/CUSR0000SEEE.csv")
cpi.ts<-ts(cpi[,2], start=c(2006,1), end=c(2025,1), frequency=12)
cpi.ts
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
# Our packages
library(fpp)
library(fpp2)
library(TTR)
library(gridExtra)
ptheme <- theme(aspect.ratio = 2/3,text=element_text(size=10),
axis.title = element_text(size=9))
#ACF
Acf(cpi.ts)
#ACF
Acf(cpi.ts)
#ACF
Acf(cpi.ts)
#ACF
Acf(cpi.ts, lag.max = 50)
#ACF
Acf(cpi.ts, lag.max = 100)
#ACF
Acf(cpi.ts, lag.max = 90)
#ACF
Acf(cpi.ts, lag.max = 84)
#ACF
Acf(cpi.ts, lag.max = 68)
install.packages("geometry")
library(geometry)
yes <- 4
yes
rm(yes)
rutgers=c(3,4,5)
rutgers
mean(rutgers)
rnorm(rutgers)
rnorm(10)
rnorm(10, mean = 2.1, sd = 1.2)
yes = rnorm(10, mean = 2.1, sd = 1.2)
plot(yes)
plot(yes) + ptheme
# Mean
mean_cpi <- meanf(cpi.ts,5)
plot(mean_cpi)
naive_cpi <- naive(cpi.ts,5)
plot(naive_cpi)
# Random Walk
rw_cpi <- rwf(cpi.ts, 5)
plot(rw_cpi)
# Random Walk
rw_cpi <- rwf(cpi.ts, 5, drift = TRUE)
plot(rw_cpi)
# Seasonal Naive
snaive_cpi <- snaive(cpi.ts,5)
plot(snaive_cpi)
ma <- matrix(data = c(1,2,3,5,6,32,1,3,4,3,), ncol = 3)
ma <- matrix(data = c(1,2,3,5,6,32,1,3,4,3), ncol = 3)
ma <- matrix(data = c(1,2,3,5,6,32,1,3,4,3,56,2), ncol = 3)
ma
t = data.frame(x = c(111,222,333), y = c(1,2,3), z = c(4,5,6))
t
ncol(t)
mean(t$z)
# Moving Averages
ma5_cpi <- ma(cpi.ts, order = 5)
ma10_cpi <- ma(cpi.ts, order = 10)
plot(ma5_cpi)
ma5_cpi
plot(mean_cpi)
#Combine into One Chart
plot(mean_cpi)
plot(mean_cpi)
lines(naive_cpi$mean,col='blue')
plot(mean_cpi)
lines(naive_cpi$mean,col='green')
lines(snaive_cpi$mean,col='red')
lines(rw_cpi$mean,col= 'pink')
lines(ma5_cpi,col='orange')
lines(ma10_cpi,col='purple')
plot(ets_cpi)
ets_cpi <- ets(cpi.ts)
plot(ets_cpi)
plot(ets_cpi)
?ets
attributes(ets_cpi)
ets_cpi$mse
hw_cpi <- HoltWinters(cpi.ts)
plot(hw_cpi)
forecast_cpi <- forecast.ets(ets_cpi, h = 5)
plot(forecast_cpi)
forecast_cpi_2 <- forecast(ets_cpi, h = 5)
plot(forecast_cpi_2)
accuracy(forecast_cpi_2)
accuracy(forecast_cpi)
forecast_cpi_new <-forecast(hw_cpi, h = 10)
plot(forecast_cpi_new)
accuracy(forecast_cpi_new)
plot(forecast_cpi_new)
plot(ets_cpi)
plot(ets_cpi)
ets_cpi <- ets(cpi.ts)
View(cpi)
# Plot since 2020
cpi2020 <- window(cpi.ts, start=c(2020,1))
library(fpp)
library(fpp2)
plot(elecequip)
Acf(elecequip)
?stl
stl_decomp <- stl(elecequip,s.window ="periodic")
plot(stl_decomp)
attributes(stl_decomp)
seasadj(stl_decomp)
plot(elecequip)
lines(seasadj(stl_decomp),col='red')
library(readr)
NJURN <- read_csv("Downloads/NJURN.csv")
View(NJURN)
f_stl<-forecast(stl_decomp)
f_stl
plot(f_stl)
decomp_elec<-decompose(elecequip)
plot(decomp_elec)
accuracy(f_stl)
plot(seasadj(stl_decomp))
attributes(decomp_elec)
decomp_elec
plot(decomp_elec)
tmp<-seasadj(decomp_elec)
plot(tmp)
plot(elecequip)
lines(tmp,col='red')
decomp_cpi <- decompose(cpi.ts)
plot(decomp_cpi)
plot(hw_cpi)
plot(sadj_cpi)
# Seasonally Adjust
sadj_cpi <- seasadj(decomp_cpi)
plot(sadj_cpi)
sadj_cpi <- seasadj(decomp_cpi)
plot(cpi.ts)
lines(sadj_cpi,col='red')
forecast_decomp <- forecast(decomp_cpi)
forecast_decomp_cpi <- forecast(decomp_cpi)
# Forecast
forecast_decomp_cpi <- forecast(decomp_cpi)
plot(forecast_decomp)
decomp_cpi <- decompose(cpi.ts)
# Forecast
forecast_decomp_cpi <- forecast(decomp_cpi)
decomp_cpi <- decompose(cpi.ts)
forecast_decomp_cpi <- forecast(decomp_cpi)
View(hw_cpi)
View(elecequip)
decomp_cpi <- stl(cpi.ts,s.window = 'periodic')
attributes(decomp_cpi)
plot(decomp_cpi)
# Seasonally Adjust
sadj_cpi <- seasadj(decomp_cpi)
plot(sadj_cpi)
```
# Forecast
forecast_decomp_cpi <- forecast(decomp_cpi)
plot(forecast_decomp)
plot(forecast_decomp_cpi)
Acf(cpi.ts, lag.max = 70)
install.packages("aTSA")
library(aTSA)
adf.test(cpi.ts)
?adf.test
accuracy(forecast_decomp_cpi)
plot(forecast(sadj_cpi))
sadj_cpi
decomp_cpi
plot(NJURN)
library(fpp)
library(fpp2)
plot(NJURN)
autoplot(NJURN)
library(TTR)
plot(NJURN)
nj_ts <-ts(NJURN[,2], start = c(1976,1), end = c(2024,12),frequency = 12)
plot(nj_ts)
Acf(nj_ts)
accuracy(forecast_cpi_new)
plot(window(cpi.ts,start=c(2020,1)))
lines(naive_cpi$mean,col='green')
lines(snaive_cpi$mean,col='red')
lines(rw_cpi$mean,col= 'pink')
lines(ma5_cpi,col='orange')
lines(ma10_cpi,col='purple')
lines(hw_cpi,col='brown')
line(forecast_decomp_cpi,col='brown')
lines(forecast_decomp_cpi,col='brown')
lines(sadj_cpi,col='brown')
accuracy(naive_cpi)
# Seasonal Naive Model
accuracy(snaive_cpi)
# Mean Model
accuracy(mean_cpi)
# Random Walk Model
accuracy(rw_cpi)
# Moving Average Model
accuracy(ma5_cpi)
# Decomposition Model
accuracy(decomp_cpi)
# Decomposition Model
accuracy(forecast_decomp_cpi)
# Holt Winters Model
accuracy(forecast_cpi_new)
View(iris)
install.packages("party")
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length +Petal.Width
iris.ctree <- ctree(myFormula, data = train.data)
library(party)
iris.ctree <- ctree(myFormula, data = train.data)
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length +Petal.Width
iris.ctree <- ctree(myFormula, data = train.data)
set.seed(1234)
ind <- sample(2, nrow(iris), replace = TRUE, prob = c(0.7, 0.3))
train.data <- iris[ind == 1, ]
test.data <- iris[ind == 2, ]
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length +Petal.Width
iris.ctree <- ctree(myFormula, data = train.data)
table(predict(iris.ctree), train.data$Species)
print(iris.ctree)
plot(iris.ctree)
testPred <- predict(iris.ctree, newdata = test.data)
table(testPred, test.data$Species)
install.packages("randomForest")
library(randomForest)
rf <- randomForest(Species ~ ., data=train.data, ntree=100,
proximity=T)
table(predict(rf), train.data$Species)
print(rf)
plot(rf)
install.packages("fredr")
?Sys.Date
install.packages("git2r")
rmarkdown::pandoc_version()
Rscript run_report.R
commit(repo, message = paste("Automated report update:", Sys.Date()))
install.packages("dplyr")
readRenviron(".Renviron")
Sys.getenv("FRED_API_KEY")
readRenviron(".Renviron")
setwd("/Users/mattcolao/Documents/unemployment-anaylsis")
getwd()
list.files(all.files = TRUE)
readRenviron(".Renviron")
Sys.getenv("FRED_API_KEY")
Sys.getenv("GITHUB_PAT")
